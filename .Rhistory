setwd("/Volumes/lag/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO")
setwd("/Volumes/lag/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO/LDSC/results/Conf_call_180411/")
##Loop over each disease/## Loop over each annotation (uniquesnps), for THICKNESS data only
for (j in 1:length(uniquesnps.TH)) {
thissnp = uniquesnps.TH[[j]]
snpind = which(Z.TH.Full$SNP==thissnp)
thisSA = Z.TH.Full[snpind,]
fullSA.padj = thisSA$fdr.y[1]
fullSA.Z = thisSA$Z.y[1]
##Set the individual regions to zero if they are not significant
#thisSA$Z[which(thisSA$fdr > 0.05)] = 0
thisSA$Z = ifelse(thisSA$fdr.y >0.05, 0, thisSA$Z.y) #repeats what was done above
##Make sure the order of each corresponds
inds = match(names(objs),thisSA$Trait)
thisSA = thisSA[inds,]
maxZ = Z.TH.max + 5
minZ = -(Z.TH.max + 5)
##Ensure the color scale is symmetrical from positive to negative
indmax = which.max(c(abs(maxZ),abs(minZ)))
if (indmax==1) {
minZ = -abs(maxZ)
} else {
maxZ = abs(minZ)
}
#minZ = -1
#maxZ = 1
##Loop through each region for plotting
for (i in 1:length(objs)) {
ftitle = paste("SA",thissnp)
obj = objs[[i]]
##If it is the first plot, set up the mesh
if (i==1) {
p = plot_ly(type = 'mesh3d',
x = obj$shapes[[1]]$positions[1,],
y = obj$shapes[[1]]$positions[2,],
z = obj$shapes[[1]]$positions[3,],
i = obj$shapes[[1]]$indices[1,],
j = obj$shapes[[1]]$indices[2,],
k = obj$shapes[[1]]$indices[3,],
##for two of the vertices, do the whole range of colors (you can't see the in the plots, but without it I couldn't get the color ranges to work)
intensity = rep(thisSA$Z[i],length(obj$shapes[[1]]$positions[1,])),
opacity=1,
cauto=FALSE,
cmax=maxZ,
cmin=minZ,
colors = colorRampPalette(c("darkred","grey","midnightblue"))(50),
showscale=TRUE)
} else {
p = add_mesh(p = p,
x = obj$shapes[[1]]$positions[1,],
y = obj$shapes[[1]]$positions[2,],
z = obj$shapes[[1]]$positions[3,],
i = obj$shapes[[1]]$indices[1,],
j = obj$shapes[[1]]$indices[2,],
k = obj$shapes[[1]]$indices[3,],
intensity = rep(thisSA$Z[i],length(obj$shapes[[1]]$positions[1,])),
opacity=1,
cauto=FALSE,
cmax=maxZ,
cmin=minZ,
showscale=FALSE)
}
}
p = layout(p=p,scene = list(xaxis=ax,yaxis=ax,zaxis=ax,camera = list(eye = list(x = 2.5, y = 0, z = 0))),title=ftitle)
htmlwidgets::saveWidget(p, file = paste0(uniquesnps.SA[j],"_medial_TH_Full_MA1.html"))
p = layout(p=p,scene = list(xaxis=ax,yaxis=ax,zaxis=ax,camera = list(eye = list(x = -2, y = 0, z = 0))),title=ftitle)
htmlwidgets::saveWidget(p, file = paste0(uniquesnps.SA[j],"_lateral_TH_Full_MA1.html"))
}
setwd("/Volumes/lag/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO/Qx")
# Read in and prepare our data to be plotted
dat0= readxl::read_xlsx("summary_qx_scores_MA1.xlsx", sheet = 2)
dat0 = dat0 %>%
group_by(analysis) %>%
mutate(fdr = p.adjust(p.value,method = "fdr")) %>%
ungroup(dat0)
dat0$annot = "Qx.1e-5"
# Load in all the Freesurfer surfaces
load('P:/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO/custom_scripts/LDSC/plottophitsonsurf/FreesurferRegionalObjs.Rdata')
# Load in all the Freesurfer surfaces
load('/Volumes/lag/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO/custom_scripts/LDSC/plottophitsonsurf/FreesurferRegionalObjs.Rdata')
fZ <- dat0
fZ$SNP <- fZ$annot
fZ$Trait = fZ$REGION
# Reset the Qx value to 0 if the FDR was greater than 0.05.
# This lets us show the non-significant regions as grey.
fZ$Z <- if_else(fZ$fdr < 0.05, fZ$Qx.Score, 0)
Z.SA <- fZ[grepl("Surf",fZ$analysis),]
Z.TH <- fZ[grepl("Thick",fZ$analysis),]
##Take only the left hemisphere obj files (everything in ENIGMA is mean bilateral)
##So no need for both hemispheres
objs = objs[1:35]
names(objs) = sapply(names(objs),function (x) {unlist(strsplit(x,".",fixed=TRUE))[length(unlist(strsplit(x,".",fixed=TRUE)))]})
##Remove axes
ax = list(
title = "",
zeroline = FALSE,
showline = FALSE,
showticklabels = FALSE,
showgrid = FALSE
)
# =============================================
# Plots!
# region - by - region, with the same min/max
# Remember to change the file names at the bottom
# =============================================
# Setting a min/max threshold for the enrichment color labeling that will be consistent across all
# annotations being plotted, since we only subset by annotation within the plotting for-loop
Z.SA.max = max(Z.SA$Z)
Z.TH.max = max(Z.TH$Z)
uniquesnps.SA = unique(Z.SA$SNP)
uniquesnps.TH = uniquesnps.SA
## Loop over each annotation (uniquesnps), for SURFACE AREA data only
for (j in 1:length(uniquesnps.SA)) {
thissnp = uniquesnps.SA[[j]]
snpind = which(Z.SA$SNP==thissnp)
thisSA = Z.SA[snpind,]
fullSA.padj = thisSA$fdr[1]
fullSA.Z = thisSA$Z[1]
##Make sure the order of each corresponds
inds = match(names(objs),thisSA$Trait)
thisSA = thisSA[inds,]
maxZ = Z.SA.max + 5
minZ = -(Z.SA.max + 5)
##Ensure the color scale is symmetrical from positive to negative
indmax = which.max(c(abs(maxZ),abs(minZ)))
if (indmax==1) {
minZ = -abs(maxZ)
} else {
maxZ = abs(minZ)
}
##Loop through each region for plotting
for (i in 1:length(objs)) {
ftitle = paste("SA",thissnp)
obj = objs[[i]]
##If it is the first plot, set up the mesh
if (i==1) {
p = plot_ly(type = 'mesh3d',
x = obj$shapes[[1]]$positions[1,],
y = obj$shapes[[1]]$positions[2,],
z = obj$shapes[[1]]$positions[3,],
i = obj$shapes[[1]]$indices[1,],
j = obj$shapes[[1]]$indices[2,],
k = obj$shapes[[1]]$indices[3,],
##for two of the vertices, do the whole range of colors (you can't see the in the plots, but without it I couldn't get the color ranges to work)
intensity = rep(thisSA$Z[i],length(obj$shapes[[1]]$positions[1,])),
opacity=1,
cauto=FALSE,
cmax=maxZ,
cmin=minZ,
colors = colorRampPalette(c("darkred","grey","midnightblue"))(50),
showscale=TRUE)
} else {
p = add_mesh(p = p,
x = obj$shapes[[1]]$positions[1,],
y = obj$shapes[[1]]$positions[2,],
z = obj$shapes[[1]]$positions[3,],
i = obj$shapes[[1]]$indices[1,],
j = obj$shapes[[1]]$indices[2,],
k = obj$shapes[[1]]$indices[3,],
intensity = rep(thisSA$Z[i],length(obj$shapes[[1]]$positions[1,])),
opacity=1,
cauto=FALSE,
cmax=maxZ,
cmin=minZ,
showscale=FALSE)
}
}
p = layout(p=p,scene = list(xaxis=ax,yaxis=ax,zaxis=ax,camera = list(eye = list(x = 2.5, y = 0, z = 0))),title=ftitle)
htmlwidgets::saveWidget(p, file = paste0(uniquesnps.SA[j],"_medial_SA_MA1.html"))
p = layout(p=p,scene = list(xaxis=ax,yaxis=ax,zaxis=ax,camera = list(eye = list(x = -2, y = 0, z = 0))),title=ftitle)
htmlwidgets::saveWidget(p, file = paste0(uniquesnps.SA[j],"_lateral_SA_MA1.html"))
}
## Loop over each annotation (uniquesnps), for THICKNESS data only
for (j in 1:length(uniquesnps.TH)) {
thissnp = uniquesnps.TH[[j]]
snpind = which(Z.TH$SNP==thissnp)
thisSA = Z.TH[snpind,]
fullSA.padj = thisSA$fdr[1]
fullSA.Z = thisSA$Z[1]
##Set the individual regions to zero if they are not significant
thisSA$Z[which(thisSA$fdr > 0.05)] = 0
##Make sure the order of each corresponds
inds = match(names(objs),thisSA$Trait)
thisSA = thisSA[inds,]
maxZ = Z.TH.max + 5
minZ = -(Z.TH.max + 5)
#maxZ = max(thisSA$Z,na.rm=TRUE)
#minZ = min(thisSA$Z,na.rm=TRUE)
##Ensure the color scale is symmetrical from positive to negative
indmax = which.max(c(abs(maxZ),abs(minZ)))
if (indmax==1) {
minZ = -abs(maxZ)
} else {
maxZ = abs(minZ)
}
##Loop through each region for plotting
for (i in 1:length(objs)) {
ftitle = paste0("TH ",names(uniquesnps.TH)[j],"\nGlobal Z=",signif(fullSA.Z,3)," Padj=",signif(fullSA.padj,3))
obj = objs[[i]]
##If it is the first plot, set up the mesh
if (i==1) {
p = plot_ly(type = 'mesh3d',
x = obj$shapes[[1]]$positions[1,],
y = obj$shapes[[1]]$positions[2,],
z = obj$shapes[[1]]$positions[3,],
i = obj$shapes[[1]]$indices[1,],
j = obj$shapes[[1]]$indices[2,],
k = obj$shapes[[1]]$indices[3,],
##for two of the vertices, do the whole range of colors (you can't see the in the plots, but without it I couldn't get the color ranges to work)
intensity = rep(thisSA$Z[i],length(obj$shapes[[1]]$positions[1,])),
opacity=1,
cauto=FALSE,
cmax=maxZ,
cmin=minZ,
colors = colorRampPalette(c("darkred","grey","midnightblue"))(50),
showscale=TRUE)
} else {
p = add_mesh(p = p,
x = obj$shapes[[1]]$positions[1,],
y = obj$shapes[[1]]$positions[2,],
z = obj$shapes[[1]]$positions[3,],
i = obj$shapes[[1]]$indices[1,],
j = obj$shapes[[1]]$indices[2,],
k = obj$shapes[[1]]$indices[3,],
intensity = rep(thisSA$Z[i],length(obj$shapes[[1]]$positions[1,])),
opacity=1,
cauto=FALSE,
cmax=maxZ,
cmin=minZ,
showscale=FALSE)
}
}
p = layout(p=p,scene = list(xaxis=ax,yaxis=ax,zaxis=ax,camera = list(eye = list(x = 2.5, y = 0, z = 0))),title=ftitle)
htmlwidgets::saveWidget(p, file = paste0(uniquesnps.TH[j],"_medial_TH_MA1.html"))
p = layout(p=p,scene = list(xaxis=ax,yaxis=ax,zaxis=ax,camera = list(eye = list(x = -2, y = 0, z = 0))),title=ftitle)
htmlwidgets::saveWidget(p, file = paste0(uniquesnps.TH[j],"_lateral_TH_MA1.html"))
}
## Loop over each annotation (uniquesnps), for THICKNESS data only
for (j in 1:length(uniquesnps.TH)) {
thissnp = uniquesnps.TH[[j]]
snpind = which(Z.TH$SNP==thissnp)
thisSA = Z.TH[snpind,]
fullSA.padj = thisSA$fdr[1]
fullSA.Z = thisSA$Z[1]
##Set the individual regions to zero if they are not significant
thisSA$Z[which(thisSA$fdr > 0.05)] = 0
##Make sure the order of each corresponds
inds = match(names(objs),thisSA$Trait)
thisSA = thisSA[inds,]
maxZ = Z.TH.max + 5
minZ = -(Z.TH.max + 5)
#maxZ = max(thisSA$Z,na.rm=TRUE)
#minZ = min(thisSA$Z,na.rm=TRUE)
##Ensure the color scale is symmetrical from positive to negative
indmax = which.max(c(abs(maxZ),abs(minZ)))
if (indmax==1) {
minZ = -abs(maxZ)
} else {
maxZ = abs(minZ)
}
##Loop through each region for plotting
for (i in 1:length(objs)) {
ftitle = paste0("TH ",names(uniquesnps.TH)[j],"\nGlobal Z=",signif(fullSA.Z,3)," Padj=",signif(fullSA.padj,3))
obj = objs[[i]]
##If it is the first plot, set up the mesh
if (i==1) {
p = plot_ly(type = 'mesh3d',
x = obj$shapes[[1]]$positions[1,],
y = obj$shapes[[1]]$positions[2,],
z = obj$shapes[[1]]$positions[3,],
i = obj$shapes[[1]]$indices[1,],
j = obj$shapes[[1]]$indices[2,],
k = obj$shapes[[1]]$indices[3,],
##for two of the vertices, do the whole range of colors (you can't see the in the plots, but without it I couldn't get the color ranges to work)
intensity = rep(thisSA$Z[i],length(obj$shapes[[1]]$positions[1,])),
opacity=1,
cauto=FALSE,
cmax=maxZ,
cmin=minZ,
colors = colorRampPalette(c("darkred","grey","midnightblue"))(50),
showscale=TRUE)
} else {
p = add_mesh(p = p,
x = obj$shapes[[1]]$positions[1,],
y = obj$shapes[[1]]$positions[2,],
z = obj$shapes[[1]]$positions[3,],
i = obj$shapes[[1]]$indices[1,],
j = obj$shapes[[1]]$indices[2,],
k = obj$shapes[[1]]$indices[3,],
intensity = rep(thisSA$Z[i],length(obj$shapes[[1]]$positions[1,])),
opacity=1,
cauto=FALSE,
cmax=maxZ,
cmin=minZ,
showscale=FALSE)
}
}
p = layout(p=p,scene = list(xaxis=ax,yaxis=ax,zaxis=ax,camera = list(eye = list(x = 2.5, y = 0, z = 0))),title=ftitle)
htmlwidgets::saveWidget(p, file = paste0(uniquesnps.TH[j],"_medial_TH_MA1.html"))
p = layout(p=p,scene = list(xaxis=ax,yaxis=ax,zaxis=ax,camera = list(eye = list(x = -2, y = 0, z = 0))),title=ftitle)
htmlwidgets::saveWidget(p, file = paste0(uniquesnps.TH[j],"_lateral_TH_MA1.html"))
}
setwd("P:/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO/Qx")
setwd("/Volumes/lag/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO/Qx")
setwd("/Volumes/lag/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO/Qx")
setwd("/Volumes/lag/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO/Qx")
setwd("/Volumes/lag/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO/Qx")
setwd("/Volumes/lag/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO")
setwd("/Volumes/lag/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO/Qx")
options(stringsAsFactors=FALSE)
setwd("/Volumes/lag/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO/Qx")
setwd("/Volumes/lag/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO")
setwd("/Volumes/lag/workspaces/lg-neanderthals/raw_data/ENIGMA-EVO/Qx")
setwd("/Volumes/lg-jr-family/working/2018/results/1_GEMINI_prep")
vcf = read.delim("JR_family_2018_9WGS_post_vt.vep88.annovar.autodom.recode.vcf", stringsAsFactors = F, skip = 325, sep = "\t")
vcf[1:10,8]
View(vcf[1,8])
library(tidyverse)
info_cols = vcf %>% select(INFO) %>%
separate(sep = ";")
info_cols = vcf %>% select(INFO) %>%
separate(.,sep = ";")
info_cols = vcf %>% separate(INFO,sep = ";")
#make a list of the columns in the INFO field
info0 = vcf[1,8]
info1 = str_split(string = info0,pattern = ";")
View(info1)
info1 = as.vector(str_split(string = info0,pattern = ";"))
info1 = as.data.frame(str_split(string = info0,pattern = ";"))
View(info1)
info1 = as.data.frame(str_split(string = info0,pattern = ";"), col.names = "Complete")
View(info1)
info1 = info1 %>% separate(Complete,into = c("Annotation", "Value"), sep = "=")
View(info1)
info0
info_cols = as.vector(info1$Annotation)
vcf = vcf %>% separate(INFO, into = info_cols, sep = ";")
View(vcf)
info_cols
vcf = read.delim("JR_family_2018_9WGS_post_vt.vep88.annovar.autodom.recode.vcf", stringsAsFactors = F, skip = 325, sep = "\t")
annovar = vcf %>% separate(INFO, into = info_cols[19:200], sep = ";", extra = "merge", fill =  "right")
View(annovar)
annovar =  vcf %>% separate(INFO, into = c(GATK, ANNOVAR), sep = "ANNOVAR_DATE=")
annovar =  vcf %>% separate(INFO, into = c("GATK", "ANNOVAR"), sep = "ANNOVAR_DATE=")
View(annovar)
info_cols2 = info_cols[19:]
info_cols2 = info_cols[19:200]
annovar = annovar %>% separate(ANNOVAR, into = info_cols2, sep = ";")
View(annovar)
fruits <- c(
"apples and oranges and pears and bananas",
"pineapples and mangos and guavas"
)
str_split_fixed(fruits, "and ", 3)
annovar = annovar %>% select_if(%in% info_cols2) %>%
mutate_all(funs(strsplit(.,"=")[[1]][2]))
annovar = annovar %>%
mutate_at(vars = info_cols2, .funs = strsplit(.,"=")[[1]][2])
annovar = annovar %>%
mutate_at(.vars = info_cols2, .funs = strsplit(.,"=")[[1]][2])
annovar = annovar %>%
mutate_at(.vars = info_cols2, .funs = strsplit("=")[[1]][2])
annovar = annovar %>%
mutate_at(.vars = info_cols2, .funs = strsplit(x = ., split = "=")[[1]][2])
annovar = annovar %>%
mutate_at(.vars = info_cols2, .funs = strsplit(x = ., split = "\=")[[1]][2])
annovar = annovar %>%
mutate_at(.vars = info_cols2, .funs = strsplit(x = ., split = "\\=")[[1]][2])
annovar = annovar %>%
mutate_at(.vars = info_cols2, .funs = str_extract(., "(?<=\\=)."))
names(annovar)
info_cols2[140] = "Interpro_domain2"
annovar =  vcf %>% separate(INFO, into = c("GATK", "ANNOVAR"), sep = "ANNOVAR_DATE=")
annovar = annovar %>% separate(ANNOVAR, into = info_cols2, sep = ";")
annovar = annovar %>%
mutate_at(.vars = info_cols2, .funs = str_extract(., "(?<=\\=)."))
info_cols2[140]
info_cols
info_cols2[[1]][140]
info_cols2[140]
info_cols2[139]
info_cols = as.vector(info1$Annotation)
info_cols2 = info_cols[19:200]
info_cols2
info_cols2[132] = "Interpro_domain2"
info_cols2
annovar =  vcf %>% separate(INFO, into = c("GATK", "ANNOVAR"), sep = "ANNOVAR_DATE=")
annovar = annovar %>% separate(ANNOVAR, into = info_cols2, sep = ";")
annovar = annovar %>%
mutate_at(.vars = info_cols2, .funs = str_extract(., "(?<=\\=)."))
View(annovar)
annovar = annovar %>%
)
annovar = annovar %>%
mutate_at(.vars = info_cols2, .funs = gsub("^.*?=","",.))
names(annovar)
annovar = annovar %>%
mutate_at(.vars = annovar[,9:189], .funs = gsub("^.*?=","",.))
annovar = annovar %>%
mutate_at(vars = info_cols2, funs = gsub("^.*?=","",.))
annovar = annovar %>%
mutate_at(vars(info_cols2), funs(gsub("^.*?=","",.)))
View(annovar)
badVQSR = c("VQSRTrancheSNP99.90to100.00","VQSRTrancheSNP99.00to99.90","VQSRTrancheINDEL99.90to100.00", "VQSRTrancheINDEL99.00to99.90")
annovar_QC1 = annovar[!annovar$FILTER %in% badVQSR,]
annovar_F1 = annovar_QC1[annovar_QC1$gnomAD_genome_ALL < 0.001,]
View(annovar_F1)
vcf = read.delim("JR_family_2018_9WGS_post_vt.vep88.annovar.autodom.recode.vcf",
stringsAsFactors = F, skip = 325, sep = "\t", na.strings = c(".", "NA"))
vcf = read.delim("JR_family_2018_9WGS_post_vt.vep88.annovar.autodom.recode.vcf",
stringsAsFactors = F, skip = 325, sep = "\t")
annovar[ annovar == "." ] <- NA
View(annovar)
vcf = read.delim("JR_family_2018_9WGS_post_vt.vep88.annovar.autodom.recode.vcf",
stringsAsFactors = F, skip = 325, sep = "\t", na.strings = c("."))
setwd("/Volumes/lg-jr-family/working/2018/results/1_GEMINI_prep")
vcf = read.delim("JR_family_2018_9WGS_post_vt.vep88.annovar.autodom.recode.vcf",
stringsAsFactors = F, skip = 325, sep = "\t", na.strings = c("."))
info0 = vcf[1,8]
info1 = as.data.frame(str_split(string = info0,pattern = ";"), col.names = "Complete")
info1 = info1 %>% separate(Complete,into = c("Annotation", "Value"), sep = "=")
info_cols = as.vector(info1$Annotation)
info_cols2 = info_cols[19:200]
info_cols2[132] = "Interpro_domain2"
annovar =  vcf %>% separate(INFO, into = c("GATK", "ANNOVAR"), sep = "ANNOVAR_DATE=")
annovar = annovar %>% separate(ANNOVAR, into = info_cols2, sep = ";")
annovar = annovar %>%
mutate_at(vars(info_cols2), funs(gsub("^.*?=","",.)))
write_delim(annovar, "JR_family_2018_9WGS_post_vt.vep88.annovar.autodom.tidy.txt", delim = "\t", col_names = T)
annovar_QC0 = read.delim("JR_family_2018_9WGS_post_vt.vep88.annovar.autodom.tidy.txt", delim = "\t", header = T)
annovar_QC0 = read.delim("JR_family_2018_9WGS_post_vt.vep88.annovar.autodom.tidy.txt", sep = "\t", header = T)
annovar_QC0 = read.delim("JR_family_2018_9WGS_post_vt.vep88.annovar.autodom.tidy.txt",
sep = "\t", header = T, stringsAsFactors = F, na.strings = c(".","NA"))
annovar_QC1 = annovar_QC0[!annovar_QC0$FILTER %in% badVQSR,]
annovar_F1 = annovar_QC1[annovar_QC1$gnomAD_genome_ALL < 0.001,]
annovar_F2 = annovar_F1[annovar_F1$ExAC_ALL < 0.001,]
annovar_F3 <- annovar_F2[which(annovar_F2$Func.refGene=="exonic" |  annovar_F2$Func.refGene=="intronic" |  annovar_F2$Func.refGene=="UTR3" |  annovar_F2$Func.refGene=="splicing" |  annovar_F2$Func.refGene=="exonic;splicing" |  annovar_F2$Func.refGene=="UTR5" | annovar_F2$Func.refGene=="UTR5;UTR3"),]
View(annovar_F3)
unique(annovar_F2$Func.refGene)
names(annovar_F2)
annovar_F3 <- annovar_F2[annovar_F2$Func.refGene=="exonic" |  annovar_F2$Func.refGene=="intronic" |  annovar_F2$Func.refGene=="UTR3" |  annovar_F2$Func.refGene=="splicing" |  annovar_F2$Func.refGene=="exonic;splicing" |  annovar_F2$Func.refGene=="UTR5" | annovar_F2$Func.refGene=="UTR5;UTR3",]
View(annovar_F3)
table(annovar_F2$Func.refGene)
str(annovar_F2$Func.refGene)
annovar =  vcf %>% separate(INFO, into = c("GATK", "ANNOVAR"), sep = "ANNOVAR_DATE=")
sum(is.na(annovar_F2$Func.refGene))
str(annovar_F2)
sum(is.na(annovar_F2$CADD_phred))
is.na(annovar_F2$CADD_phred)
sum(is.na(annovar_QC1$CADD_phred))
annovar_F1 = annovar_QC1[annovar_QC1$gnomAD_genome_ALL < 0.01,]
annovar_F2 = annovar_F1[annovar_F1$ExAC_ALL < 0.001,]
annovar_F2 = annovar_F1[annovar_F1$ExAC_ALL < 0.01,]
is.na(annovar_F2$CADD_phred)
sum(is.na(annovar_F2$CADD_phred))
length(annovar_F2 - sum(is.na(annovar_F2$CADD_phred))
)
length(annovar_F2) - sum(is.na(annovar_F2$CADD_phred))
length(annovar_F2)
nrow(annovar_F2) - sum(is.na(annovar_F2$CADD_phred))
hist(annovar_QC1$gnomAD_genome_ALL)
unique(annovar_QC1$FILTER)
nrow(annovar_F2) - sum(is.na(annovar_F2$gnomAD_genome_ALL))
nrow(annovar_QC1) - sum(is.na(annovar_QC1$gnomAD_genome_ALL))
# How many are relatively rare? And what do those look like?
annovar_F1 = annovar_QC1[annovar_QC1$gnomAD_genome_ALL < 0.01,]
annovar_F2 = annovar_F1[annovar_F1$ExAC_ALL < 0.01,]
nrow(annovar_F2) - sum(is.na(annovar_F2$CADD_phred))
#nrow(annovar_F2) - sum(is.na(annovar_F2$CADD_phred))
table(as.factor(annovar_F2$Func.refGene)
)
#nrow(annovar_F2) - sum(is.na(annovar_F2$CADD_phred))
table(annovar_F2$Func.refGene)
annovar_F3 <- annovar_F2[annovar_F2$Func.refGene=="exonic",]
View(annovar_F3)
View(annovar_F2)
# How many are relatively rare? And what do those look like?
annovar_F1 = annovar_QC1[annovar_QC1$gnomAD_genome_ALL < 0.01,]
annovar_F2 = annovar_F1[annovar_F1$ExAC_ALL < 0.01,]
# How many are relatively rare? And what do those look like?
annovar_F1 = annovar_QC1[annovar_QC1$gnomAD_genome_ALL < 0.001,]
View(annovar_F1)
table(annovar_F1$Func.refGene)
vcf = read.delim("JR_family_2018_9WGS_post_vt.vep88.annovar.autodom.recode.vcf",
stringsAsFactors = F, skip = 325, sep = "\t", na.strings = c("."), encoding = "UTF-8")
#make a list of the columns in the INFO field
info0 = vcf[1,8]
info1 = as.data.frame(str_split(string = info0,pattern = ";"), col.names = "Complete")
info1 = info1 %>% separate(Complete,into = c("Annotation", "Value"), sep = "=")
info_cols = as.vector(info1$Annotation)
info_cols2 = info_cols[19:200]
info_cols2[132] = "Interpro_domain2"
annovar =  vcf %>% separate(INFO, into = c("GATK", "ANNOVAR"), sep = "ANNOVAR_DATE=")
annovar = annovar %>% separate(ANNOVAR, into = info_cols2, sep = ";")
annovar = annovar %>%
mutate_at(vars(info_cols2), funs(gsub("^.*?=","",.)))
unique(annovar$Func.refGene)
Vieq(annovar[grepl(pattern = "x3b"),])
Vieq(annovar[grepl(pattern = "x3b"),])
View(annovar[grepl(pattern = "x3b"),])
View(annovar[grepl(pattern = "x3b", x = annovar$Func.refGene),])
View(annovar)
nrow(annovar_QC1) - sum(is.na(annovar_QC1$Func.refGene)) #6090 variants have a freq. in gnomAD
View(annovar_F1)
nrow(annovar_QC1) - sum(is.na(annovar_QC1$gnomAD_genome_ALL)) #6090 variants have a freq. in gnomAD
install.packages("miniUI")
setwd("~/Dropbox/aktilot.github.io")
blogdown:::serve_site()
blogdown::install_hugo()
blogdown:::serve_site()
setwd("~/Dropbox/aktilot.github.io/public")
blogdown:::serve_site()
